******************************
******Author - Ali Usman******
*****Created - May, 2022******
******************************

Note - The uncertainties for the efficiencies are purely statistical and blow up quickly with low statistics (e.g. individual run). Therefore, they should not be used for yield calculations. An overall error for entire setting must be used instead which should be calculated using same formula. Please contact AU for further details.

=====================================
=========== General Info ============
=====================================

KLT_Run_Number		:		{gen_run_number}
KLT_Beam_Energy		:		{gpbeam}
KLT_Target_Mass_(amu)	:		{gtargmass_amu}

KLT_HMS_Particle_Mass	:		{hpartmass}
KLT_HMS_P_Central	:		{hpcentral}
KLT_HMS_Angle		:		{htheta_lab}

KLT_SHMS_Particle_Mass	:		{ppartmass}
KLT_SHMS_P_Central	:		{ppcentral}
KLT_SHMS_Angle		:		{ptheta_lab}

KLT_SHMS_Run_Length	:		{P.1MHz.scalerTime:%.3f} sec
KLT_HMS_Run_Length	:		{H.1MHz.scalerTime:%.3f} sec

KLT_Total_Events	:		{GOOD_SINGLES_Events.npassed}

Cut on BCM{gBCM_Current_threshold_index+1} current of {gBCM_Current_threshold} uA. Beam over threshold for {H.1MHz.scalerTimeCut:%.3f}s, or {((H.1MHz.scalerTimeCut/H.1MHz.scalerTime)*100.):%.3f}% of total run time.

KLT_BCM_Cut_SHMS_Run_Length      :               {P.1MHz.scalerTimeCut:%.3f} sec                                  
KLT_BCM_Cut_HMS_Run_Length       :               {H.1MHz.scalerTimeCut:%.3f} sec

 With no cuts on BCM{gBCM_Current_threshold_index+1}.

KLT_BCM1_Current			:		{H.BCM1.scalerCharge/H.1MHz.scalerTime:%.3f} uA
KLT_Unser_Current			:		{H.Unser.scalerCharge/H.1MHz.scalerTime:%.3f} uA

KLT_BCM1_Charge				:		{H.BCM1.scalerCharge/1000.:%.3f} mC
KLT_Unser_Charge			:		{H.Unser.scalerCharge/1000.:%.3f} mC

Cut on BCM{gBCM_Current_threshold_index+1} current of {gBCM_Current_threshold} uA. Beam over threshold for {H.1MHz.scalerTimeCut:%.3f}s, or {((H.1MHz.scalerTimeCut/H.1MHz.scalerTime)*100.):%.3f}% of total run time.

KLT_BCM1_Beam_Cut_Current		   :	       {H.BCM1.scalerChargeCut/H.1MHz.scalerTimeCut:%.3f} uA
KLT_Unser_Beam_Cut_Current   	   	   :	       {H.Unser.scalerChargeCut/H.1MHz.scalerTimeCut:%.3f} uA

KLT_BCM1_Beam_Cut_Charge   	   	   :	       {H.BCM1.scalerChargeCut/1000.:%.3f} mC
KLT_Unser_Beam_Cut_Charge   	   	   :	       {H.Unser.scalerChargeCut/1000.:%.3f} mC

KLT_Ps1_factor	 	 	    	   :		  {gHC_ti_ps_factors[0]}
KLT_Ps2_factor				   :		  {gHC_ti_ps_factors[1]}
KLT_Ps3_factor				   :		  {gHC_ti_ps_factors[2]}
KLT_Ps4_factor				   :		  {gHC_ti_ps_factors[3]}
KLT_Ps5_factor				   :		  {gHC_ti_ps_factors[4]}
KLT_Ps6_factor				   :		  {gHC_ti_ps_factors[5]}

KLT_Total_SHMS_EL-REAL_Triggers                   :		{P.pTRIG2.scaler}
KLT_(current_cut)_Total_SHMS_EL-REAL_Triggers     :		{P.pTRIG2.scalerCut}
KLT_Pre-Scaled_SHMS_EL-REAL_Triggers              :		{(P.pTRIG2.scaler/gHC_ti_ps_factors[1]):%.0f}
KLT_SHMS_EL-REAL_Trigger_Rate                     :		{P.pTRIG2.scalerCut/P.1MHz.scalerTimeCut/1000.:%.3f} kHz
KLT_Accepted_SHMS_Triggers                    	  :		{pTRIG2_ROC2.npassed}

KLT_Total_HMS_EL-REAL_Triggers			  :		{P.pTRIG3.scaler}
KLT_(current_cut)_Total_HMS_EL-REAL_Triggers  	  :		{P.pTRIG3.scalerCut}
KLT_Pre-Scaled_HMS_EL-REAL_Triggers           	  :		{(P.pTRIG3.scaler/gHC_ti_ps_factors[2]):%.0f}
KLT_HMS_EL-REAL_Trigger_Rate                  	  :		{P.pTRIG3.scalerCut/P.1MHz.scalerTimeCut/1000.:%.3f} kHz
KLT_Accepted_HMS_Triggers                     	  :		{pTRIG3_ROC2.npassed}

=:=:=:=:
= EDTM =
=:=:=:=:

ote, the following calculations rely upon the assumption that both the SHMS and HMS are triggering on ELREAL and that there is no COIN trigger.

KLT_EDTM_Accepted_Triggers	     : 	  {edtm_accepted.npassed}
KLT_HMS_EDTM_Accepted_Triggers	     :	  {hms_edtm_accepted.npassed}
KLT_SHMS_EDTM_Accepted_Triggers	     :	  {(shms_edtm_accepted.npassed) + (both_sing_edtm_accepted.npassed)}

KLT_HMS_Scale_Fact   		     :	  {1/gHC_ti_ps_factors[2]-1/(gHC_ti_ps_factors[2]*gHC_ti_ps_factors[1])}
KLT_SHMS_Scale_Fact	       	     :	  {1/gHC_ti_ps_factors[1]}

KLT_HMS_EDTM_LT			     :	  {(hms_edtm_accepted.npassed/((P.EDTM.scaler+0.0001)*(1/gHC_ti_ps_factors[2]-1/(gHC_ti_ps_factors[2]*gHC_ti_ps_factors[1])))):%8.4f} +- {(sqrt(hms_edtm_accepted.npassed*(1-hms_edtm_accepted.npassed/(P.EDTM.scaler+0.0001)))/((P.EDTM.scaler+0.0001)*(1/gHC_ti_ps_factors[2]-1/(gHC_ti_ps_factors[2]*gHC_ti_ps_factors[1])))):%8.4f}

KLT_SHMS_EDTM_LT		     :	  {(((shms_edtm_accepted.npassed) + (both_sing_edtm_accepted.npassed))/((P.EDTM.scaler+0.0001)*(1/gHC_ti_ps_factors[1]))):%8.4f} +- {(sqrt(((shms_edtm_accepted.npassed) + (both_sing_edtm_accepted.npassed))*(1-(((shms_edtm_accepted.npassed) + (both_sing_edtm_accepted.npassed))/((P.EDTM.scaler+0.0001)))))/((P.EDTM.scaler+0.0001)*(1/gHC_ti_ps_factors[1]))):%8.4f}

=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:
=   Computer Live/Dead Times   =
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:

*New* work in progress calculations, might give numbers that make sense

KLT_HMS_CPULT     	          :	     {((pTRIG3_ROC2.npassed)/(P.pTRIG3.scaler)):%8.4f} +- {(sqrt(((P.pTRIG3.scaler*pTRIG3_ROC2.npassed)+((pTRIG3_ROC2.npassed)*(pTRIG3_ROC2.npassed)))/(P.pTRIG3.scaler*P.pTRIG3.scaler*P.pTRIG3.scaler))):%8.4f}
KLT_SHMS_CPULT		  	  :	     {((pTRIG2_ROC2.npassed)/(P.pTRIG2.scaler)):%8.4f} +- {(sqrt(((P.pTRIG2.scaler*pTRIG2_ROC2.npassed)+((pTRIG2_ROC2.npassed)*(pTRIG2_ROC2.npassed)))/(P.pTRIG2.scaler*P.pTRIG2.scaler*P.pTRIG2.scaler))):%8.4f}

*******************************
***  Detector Efficiencies  ***
*******************************

=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:
=     Tracking Efficiency    =
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:

KLT_SHMS_ELec_ALL_Trk_Should		:	{shmsScinShoulde.npassed}
KLT_SHMS_Elec_ALL_Trk_Did		:	{shmsScinDide.npassed}
KLT_SHMS_Elec_Sing_Trk_Should		:	{shmsScinSingShoulde.npassed}
KLT_SHMS_Elec_Sing_Trk_Did		:	{shmsScinSingDide.npassed}
KLT_HMS_Elec_ALL_Trk_Should		:	{HMSScinShoulde.npassed}
KLT_HMS_Elec_ALL_Trk_Did		:	{HMSScinDide.npassed}
KLT_HMS_Elec_Sing_Trk_Should		:	{HMSScinSingShoulde.npassed}
KLT_HMS_Elec_Sing_Trk_Did		:	{HMSScinSingDide.npassed}

KLT_SHMS_Elec_ALL_TRACK_EFF             :          {shmsScinDide.npassed / (shmsScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((shmsScinShoulde.npassed)*(shmsScinDide.npassed))+((shmsScinDide.npassed)*(shmsScinDide.npassed))) / ((shmsScinShoulde.npassed)*(shmsScinShoulde.npassed)*(shmsScinShoulde.npassed)))):%8.4f}

KLT_SHMS_Elec_SING_TRACK_EFF		:	   {shmsScinSingDide.npassed / (shmsScinSingShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((shmsScinSingShoulde.npassed)*(shmsScinSingDide.npassed))+((shmsScinSingDide.npassed)*(shmsScinSingDide.npassed))) / ((shmsScinSingShoulde.npassed)*(shmsScinSingShoulde.npassed)*(shmsScinSingShoulde.npassed)))):%8.4f}

KLT_HMS_Elec_ALL_TRACK_EFF		:          {HMSScinDide.npassed / (HMSScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((HMSScinShoulde.npassed)*(HMSScinDide.npassed))+((HMSScinDide.npassed)*(HMSScinDide.npassed))) / ((HMSScinShoulde.npassed)*(HMSScinShoulde.npassed)*(HMSScinShoulde.npassed)))):%8.4f}

KLT_HMS_Elec_SING_TRACK_EFF		:	   {HMSScinSingDide.npassed / (HMSScinSingShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((HMSScinSingShoulde.npassed)*(HMSScinSingDide.npassed))+((HMSScinSingDide.npassed)*(HMSScinSingDide.npassed))) / ((HMSScinSingShoulde.npassed)*(HMSScinSingShoulde.npassed)*(HMSScinSingShoulde.npassed)))):%8.4f}

=:=:=:=:=:=:=:=:=:=:=:=:=
=     SHMS Cerenkovs    =
=:=:=:=:=:=:=:=:=:=:=:=:=

***************
* HGC Cerenkov
***************

KLT_SHMS_Elec_HGC_Did		    :   {SHMSHGCDide.npassed}
KLT_SHMS_Elec_HGC_Should	    :	{SHMSHGCShoulde.npassed}

KLT_SHMS_HGC_Elec_Eff		    :   {SHMSHGCDide.npassed/(SHMSHGCShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((SHMSHGCShoulde.npassed)*(SHMSHGCDide.npassed))+((SHMSHGCDide.npassed)*(SHMSHGCDide.npassed))) / ((SHMSHGCDide.npassed)*(SHMSHGCDide.npassed)*(SHMSHGCDide.npassed)))):%8.4f}

**********
* Aerogel
**********

KLT_SHMS_Elec_Aero_Did		    :   {SHMSAeroDide.npassed}
KLT_SHMS_Elec_Aero_Should	    :	{SHMSAeroShoulde.npassed}

KLT_SHMS_Aero_Elec_Eff		    :   {SHMSAeroDide.npassed/(SHMSAeroShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((SHMSAeroShoulde.npassed)*(SHMSAeroDide.npassed))+((SHMSAeroDide.npassed)*(SHMSAeroDide.npassed))) / ((SHMSAeroShoulde.npassed)*(SHMSAeroShoulde.npassed)*(SHMSAeroShoulde.npassed)))):%8.4f}

=:=:=:=:=:=:=:=:=:=:=:=:=
=      HMS Cerenkov     =
=:=:=:=:=:=:=:=:=:=:=:=:=

KLT_HMS_ALL_Elec_Cer_Did	    :   {HMSHGCDidelec.npassed}
KLT_HMS_ALL_Elec_Cer_Should	    :	{HMSHGCShouldelec.npassed}
KLT_HMS_SING_Elec_Cer_Did	    :	{HMSHGCSINGDide.npassed}
KLT_HMS_SING_Elec_Cer_Should	    :	{HMSHGCSINGShoulde.npassed}

KLT_HMS_Cer_ALL_Elec_Eff	    :   {HMSHGCDidelec.npassed / (HMSHGCShouldelec.npassed+0.0001):%8.4f} +- {(sqrt((((HMSHGCShouldelec.npassed)*(HMSHGCDidelec.npassed))+((HMSHGCDidelec.npassed)*(HMSHGCDidelec.npassed))) / ((HMSHGCShouldelec.npassed)*(HMSHGCShouldelec.npassed)*(HMSHGCShouldelec.npassed)))):%8.4f}

KLT_HMS_Cer_SING_Elec_Eff	    :	{HMSHGCSINGDide.npassed / (HMSHGCSINGShoulde.npassed+0.0001):%8.4f} +- {(sqrt((((HMSHGCSINGShoulde.npassed)*(HMSHGCSINGDide.npassed))+((HMSHGCSINGDide.npassed)*(HMSHGCSINGDide.npassed))) / ((HMSHGCSINGShoulde.npassed)*(HMSHGCSINGShoulde.npassed)*(HMSHGCSINGShoulde.npassed)))):%8.4f}


**************************
* Hodoscope Efficiencies *
**************************

=:=:=:=:=
= SHMS  =
=:=:=:=:=

KLT_SHMS_Hodo_Plane_1	:	{phodo_plane_AND_eff[0]}
KLT_SHMS_Hodo_Plane_2	:	{phodo_plane_AND_eff[1]}
KLT_SHMS_Hodo_Plane_3	:	{phodo_plane_AND_eff[2]}
KLT_SHMS_Hodo_Plane_4	:	{phodo_plane_AND_eff[3]}

KLT_SHMS_Hodo_S1XY	:	{phodo_s1XY_eff}
KLT_SHMS_Hodo_S2XY	:	{phodo_s2XY_eff}

KLT_SHMS_Hodo_3_of_4_EFF	:	{phodo_3_of_4_eff}
KLT_SHMS_Hodo_4_of_4_EFF	:	{phodo_4_of_4_eff}

=:=:=:=:=
=  HMS  =
=:=:=:=:=

KLT_HMS_Hodo_Plane_1	:	{hhodo_plane_AND_eff[0]}
KLT_HMS_Hodo_Plane_2	:	{hhodo_plane_AND_eff[1]}
KLT_HMS_Hodo_Plane_3	:	{hhodo_plane_AND_eff[2]}
KLT_HMS_Hodo_Plane_4	:	{hhodo_plane_AND_eff[3]}

KLT_HMS_Hodo_S1XY	:	{hhodo_s1XY_eff}
KLT_HMS_Hodo_S2XY	:	{hhodo_s2XY_eff}

KLT_HMS_Hodo_3_of_4_EFF	:	{hhodo_3_of_4_eff}
KLT_HMS_Hodo_4_of_4_EFF	:	{hhodo_4_of_4_eff}

****************************
* Calorimeter Efficiencies *
****************************

These are raw efficiencies and should not be used for yield calculation

=:=:=:=:=
= SHMS  =
=:=:=:=:=

shmsPreShower        Counts: {P.cal.stat_trksum1} eff : {P.cal.stat_hitsum1 / P.cal.stat_trksum1} 
shmsShowerArray      Counts: {P.cal.stat_trksum_array} eff : {P.cal.stat_hitsum_array / P.cal.stat_trksum_array}

=:=:=:=:=
=  HMS  =
=:=:=:=:=

hA       Counts: {H.cal.stat_trksum1} eff : {H.cal.stat_hitsum1 / H.cal.stat_trksum1}
hB       Counts: {H.cal.stat_trksum2} eff : {H.cal.stat_hitsum2 / H.cal.stat_trksum2}
hC       Counts: {H.cal.stat_trksum3} eff : {H.cal.stat_hitsum3 / H.cal.stat_trksum3}
hD       Counts: {H.cal.stat_trksum4} eff : {H.cal.stat_hitsum4 / H.cal.stat_trksum4}

===================
== Triggers Info ==
===================

KLT_SHMS_Hodoscope_S1X_Triggers         :       {P.S1X.scalerCut}
KLT_HMS_Hodoscope_S1X_Triggers          :       {H.S1X.scalerCut}

KLT_SHMS_Hodoscope_S1X_Rate         :    {(P.S1X.scalerCut/P.1MHz.scalerTimeCut)/1000.:%.3f} kHz
KLT_HMS_Hodoscope_S1X_Rate          :    {(H.S1X.scalerCut/H.1MHz.scalerTimeCut)/1000.:%.3f} kHz
